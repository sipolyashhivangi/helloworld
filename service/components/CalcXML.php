<?php

/* * ********************************************************************
 * Filename: CalcXML.php
 * Folder: components
 * Description: Interaction with the CalcXML service
 * @author Subramanya HS (For TruGlobal Inc)
 * @copyright (c) 2012 - 2013
 * Change History:
 * Version         Author               Change Description
 * ******************************************************************** */

//include nu soap client
require_once(realpath(dirname(__FILE__) . '/../lib/nusoap/nusoap.php'));

/* Below are implemented calculators
  1.    bud02: How much am I spending?
  2.    bud04: Should I pay down debt or invest my monthly surplus?
  3.    bud05: How long will my money last with systematic withdrawals?
  4.    bud09: What is my current cash flow?
  5.    bud11: What is the value of reducing, postponing or foregoing expenses?
  6.    col01: How much should I be saving for college?
  7.    det03: What would my loan payments be?
  8.    det06: Should I consolidate my personal debt into a new loan?
  9.    det07: Restructuring debts for accelerated payoff
  10.   hom06: Should I rent or buy a home?
  11.   inc01: What is my potential estate tax liability?
  12.   inc03: Should I adjust my payroll withholdings?
  13.   ins01: How much life insurance do I need?
  14.   ins04: How much disability income insurance do I need?
  15.   ins06: What are my long-term care insurance needs?
  16.   inv01: What is my risk tolerance?  How should I allocate my assets?
  17.   inv04: What is the return on my real estate investment?
  18.   inv09: What is the long-term impact of increased investment return?
  19.   pay02: How will payroll adjustments affect my take-home pay?
  20.   pay07: What may my 401(k) be worth?
  21.   pay08: What is the impact of increasing my 401(k) / 403(b) / 457 contribution?
  22.   qua05: What will my qualified plan(s) be worth at retirement?
  23.   qua09: How do I maximize my employer 401(k) match?
  24.   qua10: What is the impact of borrowing from my retirement plan?
  25.   sav02: Income generated by a savings plan
  26.   sav06: How much should I save to reach my goal?
  27.   sav07: What could my current savings grow to?
 */

class CalcXML extends CApplicationComponent {

    //calcXML connection variables
    public $user = null;
    public $password = null;
    public $serviceUrl = null;

    /**
     * bud02: How Much Am I Spending?
     * @param
     */
    public function howMuchAmISpending() {
        try {
            $serviceToCall = "CashFlowWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3">
                <dataTable><cssClassName>simpletable</cssClassName></dataTable>
                <calcInput includeInResponse="true">
                <bud02>
                <mode>0</mode>
                <mortgage>0</mortgage>
                <vacation>0</vacation>
                <autoloan>0</autoloan>
                <persloan>0</persloan>
                <cc>0</cc>
                <fedtaxes>0</fedtaxes>
                <statetaxes>0</statetaxes>
                <fica>0</fica>
                <retaxes>0</retaxes>
                <othertaxes>0</othertaxes>
                <utilities>0</utilities>
                <repairs>0</repairs>
                <food>0</food>
                <clothing>0</clothing>
                <education>0</education>
                <childcare>0</childcare>
                <autoexp>0</autoexp>
                <transexp>0</transexp>
                <lifeins>0</lifeins>
                <homeowners>0</homeowners>
                <autoins>0</autoins>
                <medical>0</medical>
                <entertain>0</entertain>
                <travel>0</travel>
                <club>0</club>
                <hobbies>0</hobbies>
                <gifts>0</gifts>
                <homeimp>0</homeimp>
                <services>0</services>
                <charity>0</charity>
                <other>0</other>
                </bud02>
                </calcInput>
                </calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <bud02 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </bud02>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["bud02Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["bud02Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("bud02Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * bud04: Should I Pay Down Debt Or Invest My Monthly Surplus?
     * @param
     */
    public function shouldIPayDownDebt() {
        try {
            $serviceToCall = "CashFlowWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
                <calcInput includeInResponse="true">
                <bud04>
                <debtInterestRate>0.06</debtInterestRate><interestDeductible>N</interestDeductible><beforeTaxReturn>0.08</beforeTaxReturn><interestTaxable>Y</interestTaxable><taxBracket>0.0</taxBracket><monthlySurplus>0</monthlySurplus>
                </bud04>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <bud04 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </bud04>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["bud04Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["bud04Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("bud04Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * bud05: How long will my money last with systematic withdrawals?
     * @param
     */
    public function longMoneyLastSystematicWithdrawals() {
        try {
            $serviceToCall = "CashFlowWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
                <calcInput includeInResponse="true">
                <bud05>
                <savingsBalance>0</savingsBalance>
                <monthlyWithdrawal>0</monthlyWithdrawal>
                <withdrawalIncreases>0.0</withdrawalIncreases>
                <beforeTaxReturn>0.08</beforeTaxReturn>
                <taxBracket>0.25</taxBracket>
                <amortization>1</amortization>
                </bud05>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <bud05 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </bud05>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["bud05Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["bud05Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("bud05Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * bud09: What is my current cash flow?
     * @param
     */
    public function myCurrentCashFlow() {
        try {
            $serviceToCall = "CashFlowWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
                <calcInput includeInResponse="true">
                <bud09>
                <mode>0</mode>
                <wages>0</wages>
                <interest>0</interest>
                <dividends>0</dividends>
                <socialsecurity>0</socialsecurity>
                <pensions>0</pensions>
                <alimony>0</alimony>
                <otherincome>0</otherincome>
                <charity>0</charity>
                <mortgage>0</mortgage>
                <vacation>0</vacation>
                <autoloan>0</autoloan>
                <persloan>0</persloan>
                <cc>0</cc>
                <fedtaxes>0</fedtaxes>
                <statetaxes>0</statetaxes>
                <fica>0</fica>
                <retaxes>0</retaxes>
                <othertaxes>0</othertaxes>
                <utilities>0</utilities>
                <repairs>0</repairs>
                <food>0</food>
                <clothing>0</clothing>
                <education>0</education>
                <childcare>0</childcare>
                <autoexp>0</autoexp>
                <transexp>0</transexp>
                <lifeins>0</lifeins>
                <homeowners>0</homeowners>
                <autoins>0</autoins>
                <medical>0</medical>
                <entertain>0</entertain>
                <travel>0</travel>
                <club>0</club>
                <hobbies>0</hobbies>
                <gifts>0</gifts>
                <homeimp>0</homeimp>
                <services>0</services>
                <other>0</other>
                </bud09>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <bud09 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </bud09>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["bud09Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["bud09Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("bud09Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * bud11: What is the value of reducing, postponing or foregoing expenses?
     * @param
     */
    public function reducingPostponingForegoingExp() {
        try {
            $serviceToCall = "CashFlowWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <bud11>
               <beforeTaxReturn>0.08</beforeTaxReturn>
               <years>10</years>
               <description1>eat out less</description1>
               <savings1>150</savings1>
               <description2>carpool to work</description2>
               <savings2>100</savings2>
               <description3/>
               <savings3>0</savings3>
               <description4/>
               <savings4>0</savings4>
               <description5/>
               <savings5>0</savings5>
               <description6/>
               <savings6>0</savings6>
               </bud11>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <bud11 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </bud11>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["bud11Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["bud11Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("bud11Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * col01: How much should I be saving for college?
     * @param
     */
    public function savingForCollege() {
        try {
            $serviceToCall = "CollegeWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <col01>
               <collegeInflation>0.06</collegeInflation>
               <amountSaved>0</amountSaved>
               <child1Name>name here</child1Name>
               <child1Age>0</child1Age>
               <child1Schoolage>18</child1Schoolage>
               <child1Years>4</child1Years>
               <child1Amount>0</child1Amount>
               <child2Name/>
               <child2Age>0</child2Age>
               <child2Schoolage>18</child2Schoolage>
               <child2Years>4</child2Years>
               <child2Amount>0</child2Amount>
               <child3Name/>
               <child3Age>0</child3Age>
               <child3Schoolage>18</child3Schoolage>
               <child3Years>4</child3Years>
               <child3Amount>0</child3Amount>
               <child4Name/>
               <child4Age>0</child4Age>
               <child4Schoolage>18</child4Schoolage>
               <child4Years>4</child4Years>
               <child4Amount>0</child4Amount>
               <child5Name/>
               <child5Age>0</child5Age>
               <child5Schoolage>18</child5Schoolage>
               <child5Years>4</child5Years>
               <child5Amount>0</child5Amount>
               <child6Name/>
               <child6Age>0</child6Age>
               <child6Schoolage>18</child6Schoolage>
               <child6Years>4</child6Years>
               <child6Amount>0</child6Amount>
               <beforeTaxReturn>0.08</beforeTaxReturn>
               <taxBracket>0.25</taxBracket>
               <annualIncreases>0.0</annualIncreases>
               </col01>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <col01 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </col01>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["col01Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["col01Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("col01Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * det03: What would my loan payments be?
     * @param
     */
    public function myLoadPaymentBe() {
        try {
            $serviceToCall = "CreditWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <det03>
               <loanAmount>5000</loanAmount>
               <interestRate>0.05</interestRate>
               <termMonths>60</termMonths>
               <amortization>1</amortization>
               </det03>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <det03 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </det03>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["det03Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["det03Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("det03Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * det06: Should I consolidate my personal debt into a new loan?
     * @param
     */
    public function personalDebtLoan($valueArr, $years) {
        try {
            $serviceToCall = "CreditWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $debtTerm = 0;

            $xmlString = "<interestRate>0.1</interestRate>";
            $xmlString .= "<termYears>{$years}</termYears>";
            $counter = 1;
            $counterVal = 1;

            $loanBal = 0;
            $loanMin = 0;
            $loanRate = 0;

            $aloanBal = 0;
            $aloanMin = 0;
            $aloanRate = 0;
            $key = 'OTH';
            foreach ($valueArr as $valueObj) {
                if ($counter < 5) {
                    $key = 'cc';
                    $counterVal = $counter;
                } else if ($counter < 7) {
                    $key = 'auto';
                    $counterVal = $counter - 4;
                } else if ($counter < 8) {
                    $key = 'rv';
                    $counterVal = "";
                } else {
                    $key = 'other';
                    $counterVal = $counter - 7;
                }

                $xmlString .= "<{$key}{$counterVal}Balance>{$valueObj->balance}</{$key}{$counterVal}Balance>";
                $xmlString .= "<{$key}{$counterVal}Payment>{$valueObj->actualPayment}</{$key}{$counterVal}Payment>";
                $xmlString .= "<{$key}{$counterVal}Rate>{$valueObj->rate}</{$key}{$counterVal}Rate>";
                $counter = $counter + 1;
            }
            //minimum cc , auto rv and others are reuired for calculation
            while ($counter < 5) {
                $xmlString .= "<cc" . ($counter) . "Balance>0.0</cc" . ($counter) . "Balance>";
                $xmlString .= "<cc" . ($counter) . "Payment>0.0</cc" . ($counter) . "Payment>";
                $xmlString .= "<cc" . ($counter) . "Rate>0.0</cc" . ($counter) . "Rate>";
                $counter = $counter + 1;
            }
            while ($counter < 7) {
                $xmlString .= "<auto" . ($counter - 4) . "Balance>0.0</auto" . ($counter - 4) . "Balance>";
                $xmlString .= "<auto" . ($counter - 4) . "Payment>0.0</auto" . ($counter - 4) . "Payment>";
                $xmlString .= "<auto" . ($counter - 4) . "Rate>0.0</auto" . ($counter - 4) . "Rate>";
                $counter = $counter + 1;
            }
            while ($counter < 8) {
                $xmlString .= "<rvBalance>0.0</rvBalance>";
                $xmlString .= "<rvPayment>0.0</rvPayment>";
                $xmlString .= "<rvRate>0.0</rvRate>";
                $counter = $counter + 1;
            }
            while ($counter < 11) {
                $xmlString .= "<other" . ($counter - 7) . "Balance>0.0</other" . ($counter - 7) . "Balance>";
                $xmlString .= "<other" . ($counter - 7) . "Payment>0.0</other" . ($counter - 7) . "Payment>";
                $xmlString .= "<other" . ($counter - 7) . "Rate>0.0</other" . ($counter - 7) . "Rate>";
                $counter = $counter + 1;
            }

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw2" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <det06>
                    {$xmlString}
               </det06>
            </calcInput>
</calcxmlRequest>
END;

            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);


            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <det06 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </det06>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {

            } else {

                if (isset($lsCalcXMLResponseArray["det06Return"])) {

                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["det06Return"]);
                    $debtTerm = $lsXmlResponseDom->getElementsByTagName("debtInterest")->item(0)->nodeValue;
                    $recommendTerm = $lsXmlResponseDom->getElementsByTagName("recommendInterest")->item(0)->nodeValue;
                    $junk = array('$', ',');
                    $debtTerm = floatval(str_replace($junk, '', $debtTerm));
                    $recommendTerm = floatval(str_replace($junk, '', $recommendTerm));
                    return ($recommendTerm >= $debtTerm);
                }
            }
        } catch (SoapFault $E) {

        }
        return false;
    }

    /**
     * det07: Restructuring debts for accelerated payoff
     * @param
     */
    public function restructuringDebtsAcceleratedPayoff($valueObj) {
        try {

            $serviceToCall = "CreditWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $counter = 1;
            $creditors = "";
            foreach ($valueObj as $val) {
                $creditors .= "<creditor{$counter}>{$val->debtName}</creditor{$counter}>";
                $creditors .= "<balance{$counter}>{$val->balance}</balance{$counter}>";
                $creditors .= "<minimumPayment{$counter}>{$val->minimum}</minimumPayment{$counter}>";
                $creditors .= "<actualPayment{$counter}>{$val->payment}</actualPayment{$counter}>";
                $creditors .= "<rate{$counter}>{$val->rate}</rate{$counter}>";
                $counter = $counter + 1;
            }
            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <det07>
               {$creditors}
               <extraPayment>0</extraPayment>
               <debtOrderMethod>1</debtOrderMethod>
               </det07>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <det07 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </det07>
   </soapenv:Body>
</soapenv:Envelope>
END;

            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if (!$lsCalcXmlClientObject->fault) {

                if (isset($lsCalcXMLResponseArray["det07Return"])) {

                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["det07Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("currentPayoffYears")->item(0)->nodeValue;
                    return $outputCalc;
                }
            }
            return false;
        } catch (SoapFault $E) {
            return false;
        }
    }

    /**
     * hom06: Should I rent or buy a home?
     * @param
     */
    public function rentOrBuyHome() {
        try {
            $serviceToCall = "HomeMortgageWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <hom06>
               <rent>0</rent>
               <fees>0</fees>
               <rentIns>0</rentIns>
               <rentIncr>0.0</rentIncr>
               <purchase>0</purchase>
               <growth>0.05</growth>
               <loan>0</loan>
               <rate>0.06</rate>
               <term>30</term>
               <homeowners>0</homeowners>
               <taxes>0</taxes>
               <maint>0</maint>
               <analysis>30</analysis>
               <taxBracket>0.25</taxBracket>
               <beforeTaxReturn>0.08</beforeTaxReturn>
               <inf>0.035</inf>
               </hom06>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <hom06 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </hom06>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["hom06Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["hom06Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("hom06Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * inc01: What is my potential estate tax liability?
     * @param
     */
    public function myPotentialEstateTaxLiability() {
        try {
            $serviceToCall = "TaxationWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <inc01>
               <personalAssets>0</personalAssets>
               <personalGrowth>0.0</personalGrowth>
               <personalDebts>0</personalDebts>
               <investmentAssets>0</investmentAssets>
               <investmentGrowth>0.0</investmentGrowth>
               <investmentDebts>0</investmentDebts>
               <businessAssets>0</businessAssets>
               <businessGrowth>0.0</businessGrowth>
               <businessDebts>0</businessDebts>
               <charitableDonations>0</charitableDonations>
               <probate>0.03</probate>
               <growthYears>0</growthYears>
               </inc01>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <inc01 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </inc01>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["inc01Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["inc01Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("inc01Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * inc03: Should I adjust my payroll withholdings?
     * @param
     */
    public function myPayrollWithholdings() {
        try {
            $serviceToCall = "TaxationWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <inc03>
               <taxStatus>MJ</taxStatus>
               <clientIncome>0</clientIncome>
               <qualifiedSavings>0</qualifiedSavings>
               <itemizedDeductions>0</itemizedDeductions>
               <exemptions>2</exemptions>
               <dependents>0</dependents>
               <taxWithheld>0</taxWithheld>
               <allowances>2</allowances>
               <payperiod>24</payperiod>
               </inc03>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <inc03 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </inc03>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["inc03Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["inc03Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("inc03Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * ins01: How much life insurance do I need?
     * @param
     */
    public function lifeInsuranceINeed($valueObj) {
        try {
            $serviceToCall = "InsuranceWS";

            $lifeInsuranceNeeded = 0;

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <ins01>
                <clientIncome>{$valueObj->clientIncome}</clientIncome>
                <spouseIncome>{$valueObj->spouseIncome}</spouseIncome>
                <spouseAge>{$valueObj->spouseAge}</spouseAge>
                <spouseRetAge>{$valueObj->spouseRetAge}</spouseRetAge>
                <beforeTaxReturn>{$valueObj->beforeTaxReturn}</beforeTaxReturn>
                <inflation>{$valueObj->inflation}</inflation>
                <funeral>{$valueObj->funeral}</funeral>
                <finalExpenses>{$valueObj->finalExpenses}</finalExpenses>
                <mortgageBalance>{$valueObj->mortgageBalance}</mortgageBalance>
                <otherDebts>{$valueObj->otherDebts}</otherDebts>
                <desiredIncome>{$valueObj->desiredIncome}</desiredIncome>
                <term>{$valueObj->term}</term>
                <collegeNeeds>{$valueObj->collegeNeeds}</collegeNeeds>
                <investmentAssets>{$valueObj->investmentAssets}</investmentAssets>
                <lifeInsurance>{$valueObj->lifeInsurance}</lifeInsurance>
                <includeSocsec>{$valueObj->includeSocsec}</includeSocsec>
                <child1Age>{$valueObj->child1Age}</child1Age>
                <child2Age>{$valueObj->child2Age}</child2Age>
                <child3Age>{$valueObj->child3Age}</child3Age>
                <child4Age>{$valueObj->child4Age}</child4Age>
               </ins01>
            </calcInput>
</calcxmlRequest>
END;

            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <ins01 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </ins01>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {

            } else {

                if (isset($lsCalcXMLResponseArray["ins01Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["ins01Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("lifeInsuranceNeeded")->item(0)->nodeValue;

                    $junk = array('$', ',');
                    $lifeInsuranceNeeded = floatval(str_replace($junk, '', $outputCalc));
                    return $lifeInsuranceNeeded;
                }
            }
        } catch (SoapFault $E) {

        }
        return -1;
    }

    /**
     * TODO
     * ins04: How much disability income insurance do I need?
     * @param
     */
    public function disablityIncomeInsurance() {
        try {
            $serviceToCall = "InsuranceWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <ins04>

               </ins04>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <ins04 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </ins04>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["ins04Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["ins04Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("ins04Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * ins06: What are my long-term care insurance needs?
     * @param
     */
    public function longTermCareInsurance($valueObj) {
        try {
            $outputCalc = 0;
            $serviceToCall = "InsuranceWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <ins06>
                <clientAge>{$valueObj->clientAge}</clientAge>
                <ltcAge>{$valueObj->ltcAge}</ltcAge>
                <ltcCost>{$valueObj->ltcCost}</ltcCost>
                <ltcInflation>{$valueObj->ltcInflation}</ltcInflation>
                <ltcYears>{$valueObj->ltcYears}</ltcYears>
                <ltcAssets>{$valueObj->ltcAssets}</ltcAssets>
                <beforeTaxReturn>{$valueObj->beforeTaxReturn}</beforeTaxReturn>
                <taxBracket>{$valueObj->taxBracket}</taxBracket>
                <ltcIncreases>{$valueObj->ltcIncreases}</ltcIncreases>
               </ins06>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <ins06 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </ins06>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);
            #echo '<pre>' . htmlspecialchars($lsCalcXmlClientObject->response, ENT_QUOTES) . '</pre>';die;
            if ($lsCalcXmlClientObject->fault) {

            } else {

                if (isset($lsCalcXMLResponseArray["ins06Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["ins06Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("ins06Out")->item(0);
                }
            }
        } catch (SoapFault $E) {

        }
        return $outputCalc;
    }

    /**
     * inv01: How should I allocate my assets?
     * Calculator : http://www.calcxml.com/do/inv01
     * @param
     */
    public function allocateAssets() {
        try {
            $serviceToCall = "InvestmentWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <inv01>
                <q1>A</q1>
                <q2>A</q2>
                <q3>A</q3>
                <q4>A</q4>
                <q5>A</q5>
                <q6>A</q6>
                <q7>A</q7>
                <q8>A</q8>
                <q9>A</q9>
                <q10>A</q10>
               </inv01>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <inv01 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </inv01>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["inv01Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["inv01Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("inv01Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * inv04: What is the return on my real estate investment?
     * Calculator : http://www.calcxml.com/do/inv04
     * @param
     */
    public function returnOnRealEstate() {
        try {
            $serviceToCall = "InvestmentWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <inv04>
                <purchasePrice>0</purchasePrice>
                <cash>0</cash>
                <realEstate>0.8</realEstate>
                <loanAmount>0</loanAmount>
                <interestRate>0.0</interestRate>
                <loanTerm>5</loanTerm>
                <closingCosts>0</closingCosts>
                <rentalIncome>0</rentalIncome>
                <incomeFrequency>0</incomeFrequency>
                <rentIncreases>0.0</rentIncreases>
                <propertyTax>0</propertyTax>
                <insurance>0</insurance>
                <maintenance>0</maintenance>
                <expenseIncreases>0.0</expenseIncreases>
                <analysisYears>20</analysisYears>
                <realtorFees>0.0</realtorFees>
                <appreciation>0.0</appreciation>
                <taxBracket>0.25</taxBracket>
                <capitalGains>0.15</capitalGains>
               </inv04>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <inv04 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </inv04>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["inv04Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["inv04Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("inv04Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * inv09: What is the long-term impact of increased investment return?
     * Calculator : http://www.calcxml.com/do/inv09
     * @param
     */
    public function longTermImpactOfIncreasedInvestment() {
        try {
            $serviceToCall = "InvestmentWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <inv09>
                <initialBalance>0</initialBalance>
                <annualContributions>0</annualContributions>
                <projectionYears>20</projectionYears>
                <beforeTaxReturn>0.08</beforeTaxReturn>
                <taxBracket>0.25</taxBracket>
               </inv09>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <inv09 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </inv09>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["inv09Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["inv09Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("inv09Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * pay02: How will payroll adjustments affect my take-home pay?
     * Calculator : http://www.calcxml.com/do/pay02
     * @param
     */
    public function myTakeHomePay() {
        try {
            $serviceToCall = "PaycheckBenefitsWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <pay02>
                <payperiod/>
                <pay1>0</pay1>
                <pay2>0</pay2>
                <file1>M</file1>
                <file2>M</file2>
                <allow1>2</allow1>
                <allow2>2</allow2>
                <pretax1>0</pretax1>
                <pretax2>0</pretax2>
                <cont1>0.0</cont1>
                <cont2>0.0</cont2>
                <posttax1>0</posttax1>
                <posttax2>0</posttax2>
                <reimb1>0</reimb1>
                <reimb2>0</reimb2>
               </pay02>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <pay02 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </pay02>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["pay02Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["pay02Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("pay02Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * pay07: What may my 401(k) be worth?
     * Calculator : http://www.calcxml.com/do/pay07
     * @param
     */
    public function my401KWorth() {
        try {
            $serviceToCall = "PaycheckBenefitsWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <pay07>
                <yrstoretirement>30</yrstoretirement>
                <clientIncome>0</clientIncome>
                <salaryIncreases>0.03</salaryIncreases>
                <planBalance>0</planBalance>
                <compounding>26</compounding>
                <beforeTaxReturn>0.08</beforeTaxReturn>
                <employerMatch>1.0</employerMatch>
                <maximumMatch>0.03</maximumMatch>
                <currentContribution>0.04</currentContribution>
               </pay07>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <pay07 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </pay07>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["pay07Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["pay07Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("pay07Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * pay08: What is the impact of increasing my 401(k) / 403(b) / 457 contribution?
     * Calculator : http://www.calcxml.com/do/pay08
     * @param
     */
    public function increasing401KContribution() {
        try {
            $serviceToCall = "PaycheckBenefitsWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <pay08>
                <yrstoretirement>30</yrstoretirement>
                <clientIncome>0</clientIncome>
                <salaryIncreases>0.05</salaryIncreases>
                <planBalance>0</planBalance>
                <beforeTaxReturn>0.08</beforeTaxReturn>
                <compounding>26</compounding>
                <employerMatch>1.0</employerMatch>
                <maximumMatch>0.03</maximumMatch>
                <currentContribution>0.04</currentContribution>
                <proposedContribution>0.06</proposedContribution>
               </pay08>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <pay08 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </pay08>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["pay08Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["pay08Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("pay08Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * qua05: What will my qualified plan(s) be worth at retirement?
     * Calculator : http://www.calcxml.com/do/qua05
     * @param
     */
    public function qualifiedPlanWorthAtRet() {
        try {
            $serviceToCall = "QualifiedPlansWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <qua05>
                <yrsToRetirement>25</yrsToRetirement>
                <clientIncome>150000</clientIncome>
                <salaryIncreases>0.05</salaryIncreases>
                <beforeTaxReturn>0.08</beforeTaxReturn>
                <employeePlanBalance>50000</employeePlanBalance>
                <employeePlanContribution>0.04</employeePlanContribution>
                <employerMatch>1.0</employerMatch>
                <maximumMatch>0.03</maximumMatch>
                <individualPlanBalance>20000</individualPlanBalance>
                <individualPlanContribution>1000</individualPlanContribution>
                <individualPlanIncreases>0.01</individualPlanIncreases>
               </qua05>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <qua05 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </qua05>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["qua05Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["qua05Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("qua05Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * qua09: How do I maximize my employer 401(k) match?
     * Calculator : http://www.calcxml.com/do/qua09
     * @param
     */
    public function maximizeEmployer401KMatch() {
        try {
            $serviceToCall = "QualifiedPlansWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <qua09>
                <payPeriod>26</payPeriod>
                <clientIncome>0</clientIncome>
                <clientAge>30</clientAge>
                <employerMatch>1.0</employerMatch>
                <maximumMatch>0.03</maximumMatch>
                <employerMatch2>0.5</employerMatch2>
                <maximumMatch2>0.0</maximumMatch2>
               </qua09>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <qua09 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </qua09>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["qua09Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["qua09Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("qua09Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * qua10: What is the impact of borrowing from my retirement plan?
     * Calculator : http://www.calcxml.com/do/qua10
     * @param
     */
    public function borrowingMyRetirementPlan() {
        try {
            $serviceToCall = "QualifiedPlansWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <qua10>
                <loanAmount401k>0</loanAmount401k>
                <loanRate401k>0.06</loanRate401k>
                <loanTerm401k>5</loanTerm401k>
                <beforeTaxReturn>0.08</beforeTaxReturn>
                <yearsToRetirement>20</yearsToRetirement>
                <debtPayoff>N</debtPayoff>
                <debtInterestRate>0.18</debtInterestRate>
                <interestDeductible>N</interestDeductible>
                <taxBracket>0.25</taxBracket>
               </qua10>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <qua10 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </qua10>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["qua10Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["qua10Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("qua10Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * sav02: Income generated by a savings plan
     * Calculator : http://www.calcxml.com/do/sav02
     * @param
     */
    public function incomeGeneratedBySavingsPlan() {
        try {
            $serviceToCall = "SavingWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <sav02>
                <currentAge>35</currentAge>
                <retirementAge>65</retirementAge>
                <yearsNeeded>20</yearsNeeded>
                <initialBalance>0</initialBalance>
                <annualSavings>0</annualSavings>
                <savingsIncrease>0.0</savingsIncrease>
                <beforeTaxReturn>0.08</beforeTaxReturn>
                <taxBracket>0.25</taxBracket>
               </sav02>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <sav02 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </sav02>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["sav02Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["sav02Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("sav02Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     * sav06: How much should I save to reach my goal?
     * Calculator : http://www.calcxml.com/do/sav06
     * @param
     */
    public function saveToReachGoal($valuesObj) {
        try {
            $serviceToCall = "SavingWS";
            $outputCalc = "";
            $valueOut = "";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw2" returnRelevantLinks="false" chartLibrary="none" returnDataTable="false" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="false">
               <sav06>
                <initialBalance>{$valuesObj->initialBalance}</initialBalance>
                <amountNeeded>{$valuesObj->amountNeeded}</amountNeeded>
                <numYears>{$valuesObj->numYears}</numYears>
                <annualIncrease>{$valuesObj->annualIncrease}</annualIncrease>
                <beforeTaxReturn>{$valuesObj->beforeTaxReturn}</beforeTaxReturn>
                <taxBracket>{$valuesObj->taxBracket}</taxBracket>
               </sav06>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <sav06 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </sav06>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {

            } else {

                if (isset($lsCalcXMLResponseArray["sav06Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["sav06Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("annualContribution")->item(0)->nodeValue;

                    $junk = array('$', ',');
                    $valueOut = floatval(str_replace($junk, '', $outputCalc));
                }
            }
        } catch (SoapFault $E) {

        }

        return $valueOut;
    }

    /**
     * sav07: What could my current savings grow to?
     * Calculator : http://www.calcxml.com/do/sav07
     * @param
     */
    public function currentSavingsGrowTo() {
        try {
            $serviceToCall = "SavingWS";

            $lsCalcXmlClientObject = new nusoap_client($this->serviceUrl . "/" . $serviceToCall);

            $lsCalcXmlClientObject->setCurlOption(CURLOPT_SSLVERSION, 3);

            $lsCalcXmlReqestXmlBody = <<<END
            <calcxmlRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.calcxml.com/schema/calcxmlRequest.xsd" username="{$this->user}" password="{$this->password}" responseType="raw" returnRelevantLinks="false" chartLibrary="none" version="1.3"><dataTable><cssClassName>simpletable</cssClassName></dataTable>
               <calcInput includeInResponse="true">
               <sav07>
                <initialBalance>0</initialBalance>
                <annualSavings>0</annualSavings>
                <savingsIncrease>0.0</savingsIncrease>
                <numYears>20</numYears>
                <beforeTaxReturn>0.08</beforeTaxReturn>
                <taxBracket>0.25</taxBracket>
               </sav07>
            </calcInput>
</calcxmlRequest>
END;
            $lsCalcXmlReqestXmlBodyENT = self::xmlentities($lsCalcXmlReqestXmlBody);

            //request to soap service
            $lsCalcXmlReqestXml = <<<END
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <sav07 xmlns="http://webservice.calcxml.com">
         <in0 xsi:type="xsd:string">
            {$lsCalcXmlReqestXmlBodyENT}
         </in0>
      </sav07>
   </soapenv:Body>
</soapenv:Envelope>
END;
            $lsCalcXMLResponseArray = $lsCalcXmlClientObject->send($lsCalcXmlReqestXml);

            if ($lsCalcXmlClientObject->fault) {
                //throw the exception
                // throw new CException('');
            } else {

                if (isset($lsCalcXMLResponseArray["sav07Return"])) {
                    $lsXmlResponseDom = new DOMDocument();
                    $lsXmlResponseDom->loadXML($lsCalcXMLResponseArray["sav07Return"]);
                    $outputCalc = $lsXmlResponseDom->getElementsByTagName("sav07Out")->item(0);
                    print_r($outputCalc);
                    die;
                }
            }
        } catch (SoapFault $E) {
            print_r($E);
            die;
            throw new CException('');
        }
    }

    /**
     *
     * @param type $string
     * @return type
     */
    function xmlentities($string) {
        return str_replace(array("&", "<", ">", "\"", "'"), array("&amp;", "&lt;", "&gt;", "&quot;", "&apos;"), $string);
    }

    /*     * ***********************************************************************************
     * Begin helper functions
     * ********************************************************************************** */

    function personalDebtLoanHelper($debtArray) {

        $resultDebtArray = array();
        $debtPaidOff = false;
        $totalInterest = 0;
        $months = 0;
        while (!$debtPaidOff) {
            $currentDebtPaidOff = true;
            $index = 0;
            foreach ($debtArray as $debt) {
                $monthlyRate = $debt->rate / 12;
                $monthlyPayment = $debt->actualPayment;
                $amount = $debt->balance;

                if (!isset($resultDebtArray[$index])) {
                    // Setting Default Value
                    $resultDebtArray[$index] = array();
                    $resultDebtArray[$index]['amount'] = $amount;
                } else if ($resultDebtArray[$index]['amount'] > 0) {
                    // Calculating new amount and interest
                    $previousAmount = $resultDebtArray[$index]['amount'];
                    $previousInterest = $resultDebtArray[$index]['interest'];
                    $resultDebtArray[$index]['amount'] = ($previousAmount + $previousInterest - $monthlyPayment);
                }

                $resultDebtArray[$index]['interest'] = $resultDebtArray[$index]['amount'] * $monthlyRate;
                if ($resultDebtArray[$index]['interest'] > 0) {
                    $totalInterest += $resultDebtArray[$index]['interest'];
                    $currentDebtPaidOff = false;
                }
                $index++;
            }

            $debtPaidOff = $currentDebtPaidOff;
            $months++;
            if ($months >= 241) {
                return false;
            }
        }

//      return round($totalInterest);

        $resultDebtArray = array();
        $debtPaidOff = false;
        $consolidatedInterest = 0;
        $monthlyRate = (0.1 / 12);
        $months = 0;
        while (!$debtPaidOff) {
            $currentDebtPaidOff = true;

            if (count($resultDebtArray) == 0) {
                // Setting Default Value
                $resultDebtArray = array();
                $amount = 0;
                $monthlyPayment = 0;
                foreach ($debtArray as $debt) {
                    $monthlyPayment += $debt->actualPayment;
                    $amount += $debt->balance;
                }
                $resultDebtArray['amount'] = $amount;
                $resultDebtArray['monthlyPayment'] = $monthlyPayment;
            } else if ($resultDebtArray['amount'] > 0) {
                // Calculating new amount and interest
                $previousAmount = $resultDebtArray['amount'];
                $previousInterest = $resultDebtArray['interest'];
                $monthlyPayment = $resultDebtArray['monthlyPayment'];
                $resultDebtArray['amount'] = ($previousAmount + $previousInterest - $monthlyPayment);
            }

            $resultDebtArray['interest'] = $resultDebtArray['amount'] * $monthlyRate;
            if ($resultDebtArray['interest'] > 0) {
                $consolidatedInterest += $resultDebtArray['interest'];
                $currentDebtPaidOff = false;
            }

            $debtPaidOff = $currentDebtPaidOff;
            $months++;
            if ($months >= 241) {
                return true;
            }
        }

        // return round($consolidatedInterest);
        return ($consolidatedInterest >= $totalInterest);
    }

    function restructuringDebtsAcceleratedPayoffHelper($debtArray) {
        $maxPayment = 0;
        $minPayment = 0;
        foreach ($debtArray as $debt) {
            $minimumPayment = $debt->minimum;
            $monthlyPayment = $debt->payment;

            if ($minimumPayment > $monthlyPayment) {
                $maxPayment += $minimumPayment;
            } else {
                $maxPayment += $monthlyPayment;
            }
            $minPayment += $minimumPayment;
        }


        if(!function_exists ("compareLoans")) {
            function compareLoans($a, $b) {
                if ($a->balance == $b->balance) {
                    if ($a->rate == $b->rate) {
                        return 0;
                    } else {
                        return ($a->rate < $b->rate) ? -1 : 1;
                    }
                } else {
                    return ($a->balance < $b->balance) ? -1 : 1;
                }
            }
        }

        usort($debtArray, "compareLoans");


        $resultDebtArray = array();
        $debtPaidOff = false;
        $totalInterest = 0;
        $months = 0;
        $extraRollover = 0;
        while (!$debtPaidOff) {
            $currentDebtPaidOff = true;
            $index = 0;
            $rolloverPayment = $maxPayment - $minPayment + $extraRollover;
            $rolloverAdded = false;

            foreach ($debtArray as $debt) {
                $monthlyRate = $debt->rate / 12;
                $amount = $debt->balance;
                $monthlyPayment = $debt->minimum;

                if (!isset($resultDebtArray[$index])) {
                    // Setting Default Value
                    $resultDebtArray[$index] = array();
                    $resultDebtArray[$index]['amount'] = $amount;
                } else if ($resultDebtArray[$index]['amount'] > 0) {
                    if (!$rolloverAdded) {
                        $monthlyPayment += $rolloverPayment;
                    }
                    // Calculating new amount and interest
                    $previousAmount = $resultDebtArray[$index]['amount'];
                    $previousInterest = $resultDebtArray[$index]['interest'];
                    $resultDebtArray[$index]['amount'] = ($previousAmount + $previousInterest - $monthlyPayment);
                    if ($resultDebtArray[$index]['amount'] < 0) {
                        $rolloverPayment = abs($resultDebtArray[$index]['amount']);
                        $extraRollover += $debt->minimum;
                    } else {
                        $rolloverAdded = true;
                    }
                }
                $resultDebtArray[$index]['interest'] = $resultDebtArray[$index]['amount'] * $monthlyRate;
                if ($resultDebtArray[$index]['interest'] > 0) {
                    $totalInterest += $resultDebtArray[$index]['interest'];
                    $currentDebtPaidOff = false;
                }
                $index++;
            }

            $debtPaidOff = $currentDebtPaidOff;
            $months++;
            if ($months >= 241) {
                break;
            }
        }

        //  $years = round($months / 12, 1, PHP_ROUND_HALF_EVEN);
        return $months;
    }

    function lifeInsuranceINeedHelper($valueObj, $returnArray = null) {
        // Estimates of life insurance payments are calculated by future value
        // compounding each stream of payment by the inflation rate, and then
        // present value discounting the payments with the return rate.
        //FlexScore rates of return for reference
        //Return rate Level 1: 5.1
        //Return rate Level 2: 5.8
        //Return rate Level 3: 6.2
        //Return rate Level 4: 6.8
        //Return rate Level 5: 7.3
        //Return rate Level 6: 7.8
        //Return rate Level 7: 8.2
        //Return rate Level 8: 8.7
        //Return rate Level 9: 9.1
        //Return rate Level 10: 9.3

        $returnRate = $valueObj->beforeTaxReturn;
        $inflationRate = $valueObj->inflation;
        $reportObj = array("payments" => array());


        // Calculate total current liabilities
        $presentValueDesiredIncome = 0;
        $inflatedDesiredIncome = 0;
        $yearsNeeded = $valueObj->term;

        if ($valueObj->desiredIncome > 0 && $valueObj->spouseAge > 0) {
            $desiredIncome = $valueObj->desiredIncome;
            $yearIncrement = 0;
            if ($returnArray != null) {
                $reportObj["payments"][] = "-------------------------------------------------------";
                $reportObj["payments"][] = "Desired Income";
                $reportObj["payments"][] = "-------------------------------------------------------";
            }
            for ($i = 0; $i < $yearsNeeded; $i++) {
                $inflatedDesiredIncome = $this->futureValueHelper($inflationRate, $yearIncrement, 0, -$desiredIncome, 0);
                $presentValueDesiredIncome += $this->presentValueHelper($returnRate, $yearIncrement, 0, -$inflatedDesiredIncome, 0);
                $yearIncrement++;
                if ($returnArray != null) {
                    $reportObj["payments"][] = "Year[$yearIncrement]: desired income: ". number_format($inflatedDesiredIncome);
                }
            }
        }

        $totalImmediateNeeds = $valueObj->funeral + $valueObj->finalExpenses + $valueObj->mortgageBalance + $valueObj->otherDebts;
        $totalLongTermNeeds = $presentValueDesiredIncome + $valueObj->collegeNeeds;
        $totalNeeds = $totalImmediateNeeds + $totalLongTermNeeds;


        // Add Resources: present value of spouse income, current investments, life insurance assets, and social security.
        $presentValueSpouseIncome = 0;
        $spouseYearsUntilRetirement = $valueObj->spouseRetAge - $valueObj->spouseAge;

        $inflatedSpouseIncome = 0;
        $spouseIncome = $valueObj->spouseIncome;
        if ($spouseIncome > 0) {
            $yearIncrement = 0;
            if ($returnArray != null) {
                $reportObj["payments"][] = "";
                $reportObj["payments"][] = "";
                $reportObj["payments"][] = "-------------------------------------------------------";
                $reportObj["payments"][] = "Spouse Income";
                $reportObj["payments"][] = "-------------------------------------------------------";
            }
            for ($i = 0; $i < $spouseYearsUntilRetirement; $i++) {
                $inflatedSpouseIncome = $this->futureValueHelper($inflationRate, $yearIncrement, 0, -$spouseIncome, 0);
                $presentValueSpouseIncome += $this->presentValueHelper($returnRate, $yearIncrement, 0, -$inflatedSpouseIncome, 0);
                $yearIncrement++;
                if ($returnArray != null) {
                    $reportObj["payments"][] = "Year[$yearIncrement]: spouse income: ".number_format($inflatedSpouseIncome);
                }
            }
        }
        // Get Social Security from function below
        $childrenAges = array();
        if ($valueObj->child1Age > 0 && $valueObj->child1Age < 18) {
            $childrenAges[] = $valueObj->child1Age;
        }
        if ($valueObj->child2Age > 0 && $valueObj->child2Age < 18) {
            $childrenAges[] = $valueObj->child2Age;
        }
        if ($valueObj->child3Age > 0 && $valueObj->child3Age < 18) {
            $childrenAges[] = $valueObj->child3Age;
        }
        if ($valueObj->child4Age > 0 && $valueObj->child4Age < 18) {
            $childrenAges[] = $valueObj->child4Age;
        }


        $socialSecurityNeeded = 0;
        if ($valueObj->desiredIncome > 0 || ($valueObj->clientIncome > 0 && $childrenAges)) {
            if ($returnArray != null) {

                $socialSecurityArray = $this->getSocialSecurityHelper($valueObj, $returnRate, $childrenAges, $reportObj);
                $socialSecurityNeeded = $socialSecurityArray["socialsecurity"];
                $reportObj = $socialSecurityArray["reportobject"];
            } else {
                $socialSecurityNeeded = $this->getSocialSecurityHelper($valueObj, $returnRate, $childrenAges);
            }
        } else {
            $socialSecurityNeeded = 0;
        }

        $totalResources = $presentValueSpouseIncome + $valueObj->investmentAssets + $valueObj->lifeInsurance + $socialSecurityNeeded;

        // Total life insurance needed = Needs - Resources.
        $totalLifeInsuranceNeeded = 0;
        if ($totalNeeds > $totalResources) {
            $totalLifeInsuranceNeeded = $totalNeeds - $totalResources;
        }

        // debug report
        if ($returnArray != null) {
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Age, Income and Assumptions";
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Current annual income: " . number_format($valueObj->clientIncome);
            $reportObj["summary"][] = "Spouse annual income: " . number_format($valueObj->spouseIncome);
            $reportObj["summary"][] = "Spouse current age: " . number_format($valueObj->spouseAge);
            $reportObj["summary"][] = "Spouse's retirement age: " . $valueObj->spouseRetAge;
            $reportObj["summary"][] = "Investment return: " . number_format(($returnRate * 100), 2) . "%";
            $reportObj["summary"][] = "Inflation rate: " . number_format(($inflationRate * 100), 2) . "%";
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Immediate Cash Needs";
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Funeral expenses: " . number_format($valueObj->funeral);
            $reportObj["summary"][] = "Final expenses: " . number_format($valueObj->finalExpenses);
            $reportObj["summary"][] = "Mortgage balance: " . number_format($valueObj->mortgageBalance);
            $reportObj["summary"][] = "Other debts: " . number_format($valueObj->otherDebts);
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Long Term Income Needs";
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Desired annual income: " . number_format($valueObj->desiredIncome);
            $reportObj["summary"][] = "Number of years income is needed: " . $valueObj->term;
            $reportObj["summary"][] = "College needs: " . number_format($valueObj->collegeNeeds);
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Available Resources";
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Investment Assets " . number_format($valueObj->investmentAssets);
            $reportObj["summary"][] = "Existing life insurance: " . number_format($valueObj->lifeInsurance);
            $reportObj["summary"][] = "Age of child one: " . $valueObj->child1Age;
            $reportObj["summary"][] = "Age of child two: " . $valueObj->child2Age;
            $reportObj["summary"][] = "Age of child three: " . $valueObj->child3Age;
            $reportObj["summary"][] = "Age of child four: " . $valueObj->child4Age;
            $reportObj["summary"][] = "-------------------------------------------------------";

            $reportObj["summary"][] = "Calcxml Summary";
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Needs";
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Immediate Needs: " . number_format($totalImmediateNeeds);
            $reportObj["summary"][] = "Long Term Needs: " . number_format($totalLongTermNeeds);
            $reportObj["summary"][] = "Total Needs: " . number_format($totalNeeds);
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Resources";
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Investment assets: " . number_format($valueObj->investmentAssets);
            $reportObj["summary"][] = "Existing life insurance: " . number_format($valueObj->lifeInsurance);
            $reportObj["summary"][] = "Spouse's earnings: " . number_format($presentValueSpouseIncome);
            $reportObj["summary"][] = "Social security: " . number_format($socialSecurityNeeded);
            $reportObj["summary"][] = "Total resources: " . number_format($totalResources);
            $reportObj["summary"][] = "-------------------------------------------------------";
            $reportObj["summary"][] = "Additional life insurance needed: " . number_format($totalLifeInsuranceNeeded);
            $reportObj["summary"][] = "-------------------------------------------------------";

            return array("totalLifeInsuranceNeeded" => $totalLifeInsuranceNeeded, "reportrows" => $reportObj);
        } else {
            return $totalLifeInsuranceNeeded;
        }
    }

    function getSocialSecurityHelper($valueObj, $returnRate, $childrenAges, $returnArray = null) {

        // The first step in calculating Social Security is to calculate the client
        // Primary Insurance Amount (PIA).
        // Check http://www.ssa.gov/oact/cola/bendpoints.html for annual updates to the bend
        // value constants.

        $reportObj = $returnArray;
        $inflationRate = $valueObj->inflation;
        $returnRate = $returnRate;
        $socialSecurityValue = 0;
        $spouseYearsUntilRetirement = $valueObj->spouseRetAge - $valueObj->spouseAge;
        $spouseYearsAfterRetirement = $valueObj->term - $spouseYearsUntilRetirement;
        $spouseYearsUntilSocialSecurityMin = 60 - $valueObj->spouseAge;
        $spouseYearsUntilSocialSecurityMax = 70 - $valueObj->spouseAge;
        $spouseTotalYears = $spouseYearsUntilRetirement + $spouseYearsAfterRetirement;

        $clientIncome = $valueObj->clientIncome;
        $spouseIncome = $valueObj->spouseIncome;

        $clientPiaMonthly = $this->getPiaMonthlyPaymentHelper($valueObj, $returnRate, $clientIncome);
        $spousePiaMonthly = $this->getPiaMonthlyPaymentHelper($valueObj, $returnRate, $spouseIncome);
        $clientPiaAnnual = $clientPiaMonthly * 12;
        $spousePiaAnnual = $spousePiaMonthly * 12;

        //  If the spouse's income is higher than the client's, then it is used for social
        // security payments after retirement.  (Surviving spouse has a choice which to use.)
        $retirementPiaAnnual = 0;
        if ($valueObj->spouseAge > 0) {
            if ($clientPiaMonthly > $spousePiaMonthly) {
                    $retirementPiaAnnual = $clientPiaAnnual;
            } else {
                $retirementPiaAnnual = $spousePiaAnnual;
            }
        }
        $paymentAtRetirement = $this->futureValueHelper($inflationRate, $spouseYearsUntilRetirement, 0, -$retirementPiaAnnual, 0);
        $paymentAtSocialSecurityMax = $this->futureValueHelper($inflationRate, $spouseYearsUntilSocialSecurityMax, 0, -$retirementPiaAnnual, 0);

        // Next calculate the survivor Primary Insurance Amount (PIA)
        // if there are children.
        $presentValueSurvivorPia = 0;
        $presentValuePiaPayments = 0;
        $yearsWithChildren = 0;
        $survivorPiaMonthly = 0;
        $survivorPiaAnnual = 0;
        $survivorClientPia = 0;
        $survivorCeiling = 0;
        $spousalPaymentDeduction = 0;
        $inflatedSurvivorPia = 0;
        $multiplier = 0;
        $survivorPayment = 0;

        if ($childrenAges) {
            // Calculate the survivor Primary Insurance Amount (PIA) amounts based on
            // separate survivor bend points and survivor benefit ceiling.
            $survivorBendPoint1 = 1056;
            $survivorBendPoint2 = 1524;
            $survivorBendPoint3 = 1987;
            $survivorBendPercent1 = 1.50;
            $survivorBendPercent2 = 2.72;
            $survivorBendPercent3 = 1.34;
            $survivorBendPercent4 = 1.75;
            $survivorBendValue1 = 0;
            $survivorBendAdjusted1 = 0;
            $survivorBendValue2 = 0;
            $survivorBendAdjusted2 = 0;
            $survivorBendValue3 = 0;
            $survivorBendAdjusted3 = 0;
            $survivorBendValue4 = 0;
            $survivorBendAdjusted4 = 0;


            if (isset($clientPiaMonthly) && $clientPiaMonthly > 0) {

                //set the survivor Bend Point 2 value
                if ($clientPiaMonthly <= $survivorBendPoint1) {
                    $survivorBendValue1 = $clientPiaMonthly;
                    $survivorBendAdjusted1 = $clientPiaMonthly * $survivorBendPercent1;
                } else {
                    $survivorBendValue1 = $survivorBendPoint1;
                    $survivorBendAdjusted1 = $survivorBendPoint1 * $survivorBendPercent1;
                }

                //set the survivor Bend Point 2 value
                if ($clientPiaMonthly >= $survivorBendPoint2) {
                    $survivorBendValue2 = $survivorBendPoint2 - $survivorBendPoint1;
                    $survivorBendAdjusted2 = $survivorBendValue2 * $survivorBendPercent2;
                } else {
                    $survivorBendValue2 = $clientPiaMonthly - $survivorBendValue1;
                    $survivorBendAdjusted2 = $survivorBendValue2 * $survivorBendPercent2;
                }

                //set the survivor Bend Point 3 value
                if ($clientPiaMonthly >= $survivorBendPoint3) {
                    $survivorBendValue3 = $survivorBendPoint3 - $survivorBendPoint2;
                    $survivorBendAdjusted3 = $survivorBendValue3 * $survivorBendPercent3;
                } else {
                    $survivorBendValue3 = $clientPiaMonthly - $survivorBendValue1 - $survivorBendValue2;
                    $survivorBendAdjusted3 = $survivorBendValue3 * $survivorBendPercent3;
                }

                //set the survivor remaining bend value
                if ($clientPiaMonthly - $survivorBendValue3 - $survivorBendValue2 - $survivorBendValue1 > 0) {
                    $survivorBendValue4 = $clientPiaMonthly - $survivorBendValue3 - $survivorBendValue2 - $survivorBendValue1;
                    $survivorBendAdjusted4 = $survivorBendValue4 * $survivorBendPercent4;
                } else {
                    $survivorBendValue4 = 0;
                    $survivorBendAdjusted4 = 0;
                }

                //Sum three bend values and check if the total exceeds the
                //social security ceiling.
                $survivorPiaMonthly = $survivorBendAdjusted1 + $survivorBendAdjusted2 + $survivorBendAdjusted3 + $survivorBendAdjusted4;
                $survivorPiaAnnual = $survivorPiaMonthly * 12;

                // Build array of years and numbers of children in each year to
                // use as a multiplier for social security payments in each year.
                $lowAge = 17 - end($childrenAges);
                $ageMultiplier = array();
                $currentAge = 17;
                for ($i = 0; $i <= $lowAge; $i++) {
                    $ageMultiplier[$i] = 0;
                    foreach ($childrenAges as $age) {
                        if ($age <= $currentAge) {
                            $ageMultiplier[$i] += 1;
                        }
                    }
                    $currentAge--;
                }

                $survivorCap = 58947;
                $spousalEarningsLimitation = 15720;
                $survivorCeiling = $clientPiaAnnual * 1.5; //$survivorPiaAnnual;
                $survivorClientPia = $clientPiaAnnual * .75;
                $yearsWithChildren = count($ageMultiplier);

                $spousalPaymentDeduction = 0;
                if($spouseIncome > $spousalEarningsLimitation) {
                    $spousalPaymentDeduction = ($spouseIncome - $spousalEarningsLimitation) / 2;
                    if ($spousalPaymentDeduction > $survivorClientPia) {
                        $spousalPaymentDeduction = $survivorClientPia;
                    }

                }
            }
        }

        if ($returnArray != null) {
            $reportObj["payments"][] = "";
            $reportObj["payments"][] = "";
            $reportObj["payments"][] = "-------------------------------------------------------";
            $reportObj["payments"][] = "Survivor and Post-Retirement Payments";
            $reportObj["payments"][] = "-------------------------------------------------------";
        }

        // Main loop for social security payments including survivor and
        // post-retirement payments.

        $inflatedYearIncrement = 0;
        $socialSecurityIncrement = 0;

        for ($yearIncrement = 0; $yearIncrement < $spouseTotalYears; $yearIncrement++) {
            $multiplier = 0;
            $reportYear = $yearIncrement + 1;
            $spouseSurvivorPayment = false;
            // Get the multiplier from the $ageMultiplier built above.
            // If there is one or more children under sixteen years old, the spouse
            // receives a survivorClientPia benefit in addition to the children.
            if ($yearIncrement < $yearsWithChildren) {
                $multiplier = $ageMultiplier[$yearIncrement];
                if ($yearsWithChildren - $yearIncrement > 2 && $valueObj->spouseAge > 0) {
                    $multiplier++;
                    $spouseSurvivorPayment = true;
                }
            }
            if ($yearIncrement > $spouseYearsUntilRetirement || $multiplier == 1) {
                $spousalPaymentDeduction = 0;
            }
            //$loop = 0;
            // The multiplier is number of children, plus 1 if there is a survivor benefit.
            // The multiplier, number of survivors, and survivor payment ceilings are used
            // to calculate the survivor payment and post retirement payment for each year.
            $yearlyRetirementPayment = 0;
            // if there are no children there are no survivor payments.
            if ($multiplier == 0) {
                $yearlyRetirementPayment = $paymentAtRetirement;
                 //$loop = 1;   // debug
            // if the multiplier == 1, it must be for a child for a child aged 16 or 17.
            } else if ($multiplier == 1) {
                if ($survivorClientPia > $survivorPiaAnnual) {
                    $survivorPayment = $survivorCeiling;
                    $yearlyRetirementPayment = 0;
                    //$loop = 2;   // debug
                }
                else if (($paymentAtRetirement + $survivorClientPia) > $survivorPiaAnnual) {
                    $survivorPayment = $survivorClientPia;
                    if ($yearIncrement < $spouseYearsUntilRetirement) {
                        $yearlyRetirementPayment =  $survivorClientPia;
                        //$loop = 3;   // debug
                    } else {
                        $yearlyRetirementPayment = $paymentAtRetirement;
                        //$loop = 4;   // debug
                    }
                } else {
                    $survivorPayment = $survivorPayment = ($survivorClientPia * $multiplier) - $spousalPaymentDeduction;
                    $yearlyRetirementPayment = $paymentAtRetirement;
                    //$loop = 5;   // debug
                }
            // if the multiplier == 2, then there may be one child under 16 and a spouse, or
            // two children aged 16 or 17.
            } else if ($multiplier == 2) {
                if ($yearIncrement < $spouseYearsUntilRetirement) {
                    if ($spouseSurvivorPayment == true) {
                        if ((($clientPiaAnnual * $multiplier) - $spousalPaymentDeduction) < $survivorCeiling) {
                            $survivorPayment = ($survivorClientPia * $multiplier) - $spousalPaymentDeduction;
                            //$loop = 6;   // debug
                        } else {
                            $survivorPayment = $survivorCeiling;
                            //$loop = 7;   // debug
                        }
                    } else {
                        if (($clientPiaAnnual * $multiplier) < $survivorCeiling) {
                            $survivorPayment = ($survivorClientPia * $multiplier) - $spousalPaymentDeduction;
                            //$loop = 8;   // debug
                        } else {
                            $survivorPayment = $survivorCeiling;
                            //$loop = 9;   // debug
                        }
                    }
                } else {
                    $survivorPayment = $survivorClientPia;
                    $yearlyRetirementPayment = $paymentAtRetirement;
                    //$loop = 9;   // debug
                }
            } else { // ($multiplier >= 3)
                if ((($survivorClientPia * $multiplier) - $spousalPaymentDeduction) > $survivorPiaAnnual) {
                    $survivorPayment = $survivorPiaAnnual;
                    $yearlyRetirementPayment = 0;
                    //$loop = 10;   // debug
                } else {
                    $survivorPayment = ($survivorClientPia * $multiplier) - $spousalPaymentDeduction;
                    if ($yearIncrement > $spouseYearsUntilRetirement) {
                        $yearlyRetirementPayment = $paymentAtRetirement - $spousalPaymentDeduction;
                    }
                    //$loop = 11;   // debug
                }
            }

            /*/ Annual debuge values within loop
            if ($returnArray != null) {
                $reportObj["payments"][] = "Year[$reportYear]: loop: " . //$loop;
                $reportObj["payments"][] = "Year[$reportYear]: multiplier: " . $multiplier;
                $reportObj["payments"][] = "Year[$reportYear]: spouseYearsUntilRetirement: " . $spouseYearsUntilRetirement;
                $reportObj["payments"][] = "Year[$reportYear]: spouseYearsUntilSocialSecurity: " . $spouseYearsUntilSocialSecurityMin;
                $reportObj["payments"][] = "Year[$reportYear]: spouseSurvivorPayment: " . $spouseSurvivorPayment;
                $reportObj["payments"][] = "Year[$reportYear]: survivorClientPia: " . number_format($survivorClientPia);
                $reportObj["payments"][] = "Year[$reportYear]: survivorCeiling: " . number_format($survivorCeiling);
                $reportObj["payments"][] = "Year[$reportYear]: clientPiaAnnual: " . number_format($clientPiaAnnual);
                $reportObj["payments"][] = "Year[$reportYear]: survivorPiaAnnual: " . number_format($survivorPiaAnnual);
                $reportObj["payments"][] = "Year[$reportYear]: retirementPiaAnnual: " . number_format($retirementPiaAnnual);
                $reportObj["payments"][] = "Year[$reportYear]: spousalPaymentDeduction: " . number_format($spousalPaymentDeduction);
                $reportObj["payments"][] = "Year[$reportYear]: survivorPayment: " . number_format($survivorPayment);
                $reportObj["payments"][] = "Year[$reportYear]: yearlyRetirementPayment: " . number_format($yearlyRetirementPayment);
                $reportObj["payments"][] = "Year[$reportYear]: inflatedYearIncrement: " . number_format($inflatedYearIncrement);
                $reportObj["payments"][] = "Year[$reportYear]: paymentAtRetirement: " . number_format($paymentAtRetirement);
                $reportObj["payments"][] = "";
            }  //*/


            // Calculate the cumulative present value of the survivor payments
            if ($yearIncrement < $yearsWithChildren) {
                $inflatedSurvivorPia = $this->futureValueHelper($inflationRate, $yearIncrement, 0, -$survivorPayment, 0);
                $presentValueSurvivorPia += $this->presentValueHelper($returnRate, $yearIncrement, 0, -$inflatedSurvivorPia, 0);
                if ($returnArray != null) {
                    //$reportObj["payments"][] = "Year[$reportYear]: survivor payment: " . number_format($inflatedSurvivorPia);  // debug
                }
            } else {
                $inflatedSurvivorPia = 0;
                //$reportObj["payments"][] = "Year[$reportYear]: survivor payment: 0";  // debug
            }

            // Calculate the cumulative present value of the post-retirment payments
            if ($yearIncrement >= $spouseYearsUntilRetirement) {
                $inflatedPiaPayments = 0;
                if ($yearIncrement >= $spouseYearsUntilSocialSecurityMin) {
                    $inflatedPiaPayments = $this->futureValueHelper($inflationRate, $inflatedYearIncrement, 0, -$yearlyRetirementPayment, 0);
                    $presentValuePiaPayments += $this->presentValueHelper($returnRate, $yearIncrement, 0, -$inflatedPiaPayments, 0);
                }
                if ($returnArray != null) {
                    //$reportObj["payments"][] = "Year[$reportYear]: payment after retirement: ".number_format($inflatedPiaPayments); // debug
                    $reportObj["payments"][] = "Year[$reportYear]: social security payment: ".number_format($inflatedPiaPayments+ $inflatedSurvivorPia);
                }
                $inflatedYearIncrement++;
            }
            else if ($yearIncrement >= $spouseYearsUntilSocialSecurityMax && $yearIncrement > $yearsWithChildren) {
                $inflatedPiaPayments = 0;
                $inflatedPiaPayments = $this->futureValueHelper($inflationRate, $socialSecurityIncrement, 0, -$paymentAtSocialSecurityMax, 0);
                $presentValuePiaPayments += $this->presentValueHelper($returnRate, $yearIncrement, 0, -$inflatedPiaPayments, 0);
                if ($returnArray != null) {
                    //$reportObj["payments"][] = "Year[$reportYear]: payment after retirement: ".number_format($inflatedPiaPayments); // debug
                    $reportObj["payments"][] = "Year[$reportYear]: social security payment: ".number_format($inflatedPiaPayments+ $inflatedSurvivorPia);
                }
                $socialSecurityIncrement++;
            }
            else {
                if ($returnArray != null) {
                    //$reportObj["payments"][] = "Year[$reportYear]: payment after retirement: 0"; // debug
                    $reportObj["payments"][] = "Year[$reportYear]: social security payment: ".number_format($inflatedSurvivorPia);
                }
            }
            //$reportObj["payments"][] = "";  // debug
            //$reportObj["payments"][] = "";  // debug

        }

        $socialSecurityValue = $presentValuePiaPayments + $presentValueSurvivorPia;

        if ($returnArray != null) {
            return array("socialsecurity" => $socialSecurityValue, "reportobject" => $reportObj);
        } else {
            return $socialSecurityValue;
        }
    }

    function getPiaMonthlyPaymentHelper($valueObj, $returnRate, $annualIncome) {

        // This function is used for calculating both the client and spouse PIA payments.
        $inflationRate = $valueObj->inflation;
        $returnRate = $returnRate;

        $bendPoint1 = 826;
        $bendPoint2 = 4980;
        $bendPercent1 = .9;
        $bendPercent2 = .32;
        $bendPercent3 = .15;
        $clientCeiling = 33683;

        $monthlyIncome = $annualIncome / 12;
        $piaMonthly = 0;
        $piaAnnual = 0;

        $bendValue1 = 0;
        $bendAdjusted1 = 0;
        $bendValue2 = 0;
        $bendAdjusted2 = 0;
        $bendAdjusted3 = 0;

        if (isset($monthlyIncome) && $monthlyIncome > 0) {
            //set the first 90% bend value
            if ($monthlyIncome <= $bendPoint1) {
                $bendValue1 = $monthlyIncome;
                $bendAdjusted1 = $monthlyIncome * $bendPercent1;
            } else {
                $bendValue1 = $bendPoint1;
                $bendAdjusted1 = $bendPoint1 * $bendPercent1;
            }
            //set the second 32% bend value
            if ($monthlyIncome >= $bendPoint2) {
                $bendValue2 = $bendPoint2 - $bendPoint1;
                $bendAdjusted2 = ($bendPoint2 - $bendPoint1) * $bendPercent2;
            } else {
                $bendValue2 = $monthlyIncome - $bendValue1;
                $bendAdjusted2 = ($monthlyIncome - $bendValue1) * $bendPercent2;
            }
            //set the remaining 15% bend value
            if (($monthlyIncome - $bendValue1 - $bendValue2) > 0) {
                $bendValue3 = $monthlyIncome - $bendValue1 - $bendValue2;
                $bendAdjusted3 = $bendValue3 * $bendPercent3;
            } else {
                $bendValue3 = 0;
                $bendAdjusted3 = 0;
            }

            //Sum three bend values and check if the total exceeds the
            //social security ceiling.
            $piaMonthly = $bendAdjusted1 + $bendAdjusted2 + $bendAdjusted3;
            if (($piaMonthly * 12) > $clientCeiling) {
                $piaAnnual = $clientCeiling;
                $piaMonthly = $clientCeiling / 12;
            } else {
                $piaAnnual = $piaMonthly * 12;
        }
        }
        return $piaMonthly;
    }

    /*
     * PRESENT AND FUTURE VALUE CALCULATIONS
     * from PEAR:  pear.php.net/package/Math_Finance/docs/latest/Math_Finance/Math_Finance.html
     */

    function presentValueHelper($rate, $nper, $pmt, $fv = 0, $type = 0) {

        if ($nper < 0) {
            $nper = 0;
        }
        if ($rate) {
            $pv = (-$pmt * (1 + $rate * $type) * ((pow(1 + $rate, $nper) - 1) / $rate) - $fv) / pow(1 + $rate, $nper);
        } else {
            $pv = -$fv - $pmt * $nper;
        }
        return $pv;
    }

    function futureValueHelper($rate, $nper, $pmt, $pv = 0, $type = 0) {
        if ($nper < 0) {
            $nper = 0;
        }
        if ($rate) {
            $fv = -$pv * pow(1 + $rate, $nper) - $pmt * (1 + $rate * $type) * (pow(1 + $rate, $nper) - 1) / $rate;
        } else {
            $fv = -$pv - $pmt * $nper;
        }
        return $fv;
    }

    /*     * *********************************************************************************
     * End helper functions
     * ********************************************************************************* */
}

?>
